@mixin respond-to($point, $condition: min-width) {
  // Ensure media query isn't in quotes
  $condition: unquote($condition);
  // Check global breakpoints first
  @if map-has-key($breakpoints, $point) {
    @media ($condition: map-get($breakpoints, $point)) {
      @content;
    }
    // Failing that, check local tweakpoints
  } @else if map-has-key($tweakpoints, $point) {
    @media ($condition: map-get($tweakpoints, $point)) {
      @content;
    }
  } @else {
    @warn "Could not find `#{$point}` in both local ($tweakpoints) and global ($breakpoints) contexts. Media block omitted.";
  }
}

@mixin clearfix {
  &:before,
  &:after {
    content: '';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@mixin font($font-cut, $font-size, $font-weight: 'regular') {
  $font-size-properties: map-get($font-sizes, $font-size);
  $tweaks: map-get($font-tweaks, #{$font-cut}-#{$font-size});

  @include font-size(map-get($font-size-properties, font-size));

  font-family: map-get($font-families, $font-cut);
  line-height: map-get($font-size-properties, line-height);
  font-weight: map-get($font-weights, $font-weight);
  $size: map-get($font-size-properties, font-size);

  @if $tweaks {
    @each $tweak-property, $tweak-value in $tweaks {
      #{$tweak-property}: #{$tweak-value};
    }
  }
}

@mixin font-weight($font-weight) {
  font-weight: map-get($font-weights, $font-weight);
}

@mixin font-family($font-cut, $important: false) {
  $font-family: map-get($font-families, $font-cut);

  @if $font-family {
    @if $important == false {
      font-family: $font-family;
    } @else {
      font-family: $font-family !important;
    }
  } @else {
    @error "The font family '#{$font-cut}' does not exist in the list of font families!";
  }
}

@mixin font-size($size) {
  $font-size-properties: map-get($font-sizes, $size);

  @if $font-size-properties {
    @include font-size(map-get($font-size-properties, font-size));
  } @else {
    font-size: #{$size / 10}rem;
  }
}

@mixin container {
  @include clearfix;
  margin: 0 auto;
  padding: 0 $container-padding-narrow;
  max-width: $container-width;
  position: relative;

  .lt-ie9 & {
    width: $container-width;
  }

  @include respond-to('small') {
    padding: 0 $container-padding;
  }
}

@mixin column {
  float: left;
  box-sizing: border-box;
  padding-left: $gutter-width / 2;
  padding-right: $gutter-width / 2;

  .layout--is-gutter-narrow > &,
  .grid--is-gutter-narrow > & {
    padding-left: $gutter-width-narrow / 2;
    padding-right: $gutter-width-narrow / 2;
  }
}

@mixin column-last {
  float: right;
}

@mixin column-reset-last {
  float: none;
}
